@page "/"
@rendermode InteractiveServer

<h3>Live Bitcoin Prices</h3>

<button class="btn btn-primary" @onclick="SaveToDatabase">Save All Records</button>

<table class="table">
    <thead>
        <tr>
            <th>Timestamp</th>
            <th>BTC to EUR</th>
            <th>BTC to CZK</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var bitcounData in bitcoinDataList)
        {
            <tr>
                <td>@bitcounData.Timestamp.ToString("g")</td>
                <td>@bitcounData.BtcToEur</td>
                <td>@bitcounData.BtcToCzk</td>
            </tr>
        }
    </tbody>
</table>



@using BitcoinRateWeb.DAL
@using BitcoinRateWeb.Models
@using BitcoinRateWeb.Services

@inject BitcoinDataService bitcoinService
@inject BitcoinStoredPriceService bitcoinStoredPricesService

@code {
    private List<BitcoinService.BitcoinServiceResponse> bitcoinDataList = new();

    protected override async Task OnInitializedAsync()
    {
        bitcoinService.OnBitcoinDataUpdated += HandleBitcoinDataUpdate;
        bitcoinDataList.Add(bitcoinService.LastResponse);
    }

    private void HandleBitcoinDataUpdate(BitcoinService.BitcoinServiceResponse data)
    {
        bitcoinDataList.Add(data);
        InvokeAsync(StateHasChanged);
    }

    private async Task SaveToDatabase()
    {
        var newEntities = bitcoinDataList.Select(bitcoinData =>
             new BitcoinPrice
                 {
                     Timestamp = bitcoinData.Timestamp,
                     BtcToEur = bitcoinData.BtcToEur,
                     BtcToCzk = bitcoinData.BtcToCzk,
                     Note = string.Empty
                 }
        );

        await bitcoinStoredPricesService.AddAsync(newEntities);
    }

    public void Dispose()
    {
        bitcoinService.OnBitcoinDataUpdated -= HandleBitcoinDataUpdate;
    }
}
